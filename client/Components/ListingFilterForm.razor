@using Models

@if (Neighbourhoods == null)
{
    <Error Message="Neighbourhoods is required to render the form!" />
}
else
{
    <h2>Filters</h2>

    <EditForm Model="@_listingFilters" OnValidSubmit="() => FilterListings.InvokeAsync(_listingFilters)">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="row g-3 mb-3">
            <div class="col-6">
                <label for="minPrice">minimum price</label>
                <InputNumber id="minPrice" class="form-control" @bind-Value="_listingFilters.MinPrice" />
            </div>
            <div class="col-6">
                <label for="maxPrice">maximum price</label>
                <InputNumber id="maxPrice" class="form-control" @bind-Value="_listingFilters.MaxPrice" />
            </div>
        </div>

        <div class="mb-3">
            <label for="neighbourhood">neighbourhood</label>
            <InputSelect id="neighbourhood" class="form-select" @bind-Value="_listingFilters.Neighbourhood">

                @if (Neighbourhoods == null)
                {
                <option value="" selected disabled>loading...</option>
                }
                else
                {
                <option value="">All neighbourhoods</option>
                @foreach (var neighbourhood in Neighbourhoods)
                    {
                        if (neighbourhood.Name?.Length > 2)
                        {
                        <option value="@neighbourhood.Name">@neighbourhood.Name</option>
                        }
                    }
                }

        </InputSelect>
    </div>

    <div class="row g-3 mb-3">
        <div class="col-6">
            <label for="minNrOfReviews">minimum # reviews</label>
            <InputNumber id="minNrOfReviews" class="form-control" @bind-Value="_listingFilters.MinNrOfReviews" />
        </div>
        <div class="col-6">
            <label for="maxNrOfReviews">maximum # reviews</label>
            <InputNumber id="maxNrOfReviews" class="form-control" @bind-Value="_listingFilters.MaxNrOfReviews" />
        </div>
    </div>

    <div class="d-flex justify-content-between align-items-between">
        <button type="submit" class="btn btn-primary">Submit</button>

        @if (_listingFilters.MinPrice != null ||
           _listingFilters.MaxPrice != null ||
           _listingFilters.Neighbourhood != null ||
           _listingFilters.MinNrOfReviews != null ||
           _listingFilters.MaxNrOfReviews != null
           )
            {
                <button type="button" class="btn btn-link" style="text-decoration: none;" @onclick="@(e => {
                                _listingFilters.MinPrice = null;
                                _listingFilters.MaxPrice = null;
                                _listingFilters.Neighbourhood = null;
                                _listingFilters.MinNrOfReviews = null;
                                _listingFilters.MaxNrOfReviews = null;
                                FilterListings.InvokeAsync(_listingFilters);
                            })">
                    <span class="oi oi-x"></span> Clear
                </button>
            }
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public List<Neighbourhood>? Neighbourhoods { get; set; }
    [Parameter]
    public EventCallback<ListingFilters> FilterListings { get; set; }

    private ListingFilters _listingFilters = new();
}
