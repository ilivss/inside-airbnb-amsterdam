@page "/statistics"
@attribute [Authorize(Roles = "[\"admin\"]")]


@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using client.Models;
@using client.Services;
@using client.Components;

@inject IStatisticsService statisticsService;

<PageTitle>Statistics</PageTitle>

<h1>Statistics</h1>

@if (_error == null && (_averageAvailabilityPerNeighbourhood == null || _averageBedsPerNeighbourhood == null ||
_averagePricePerNeighbourhood == null || _listingCountsPerNeighbourhood == null))
{
    <div class="spinner-grow" style="width: 3rem; height: 3rem;" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (_error != null)
{
    <Error Message="@_error" />
}
else
{
    <div class="row border border-primary">
        <div class="col border border-danger">
            <h2>
                Average Availability
            </h2>
        </div>

        <div class="col border border-success">
            <h2>Average Beds</h2>
        </div>
    </div>

    <hr>

    <div class="row border border-primary">
        <div class="col border border-danger">
            <h2>Average Price</h2>
        </div>

        <div class="col border border-success">
            <h2>Listing count</h2>
        </div>
    </div>
}

@code
{
    private List<NeighbourhoodAverageAvailability>? _averageAvailabilityPerNeighbourhood { get; set; }
    private List<NeighbourhoodAverageBeds>? _averageBedsPerNeighbourhood { get; set; }
    private List<NeighbourhoodAveragePrice>? _averagePricePerNeighbourhood { get; set; }
    private List<NeighbourhoodListingCount>? _listingCountsPerNeighbourhood { get; set; }
    private string? _error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {

            _averageAvailabilityPerNeighbourhood = await statisticsService.GetAverageAvailabilityPerNeighbourhood();
            _averageBedsPerNeighbourhood = await statisticsService.GetAverageBedsPerNeighbourhood();
            _averagePricePerNeighbourhood = await statisticsService.GetAveragePricePerNeighbourhood();
            _listingCountsPerNeighbourhood = await statisticsService.GetListingCountPerNeighbourhood();
        }
        catch (AccessTokenNotAvailableException ex)
        {
            ex.Redirect();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }

        await base.OnInitializedAsync();
    }
}
