@page "/statistics"

@using client.Models;
@using client.Services;

@inject IStatisticsService statisticsService;

<PageTitle>Statistics</PageTitle>

<h1>Statistics</h1>

@if (_error == null && (_averageAvailabilityPerNeighbourhood == null || _averageBedsPerNeighbourhood == null || _averagePricePerNeighbourhood == null || _listingCountsPerNeighbourhood == null))
{
    <div class="spinner-grow" style="width: 3rem; height: 3rem;" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
}
else if (_error != null)
{
    <div class="alert alert-danger d-flex align-items-center" role="alert">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor" class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
            <path d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
        </svg>
        <div>@_error</div>
    </div>
}
else
{
    <div class="row border border-primary">
    <div class="col border border-danger">
        <h2>
            Average Availability
        </h2>
    </div>

    <div class="col border border-success">
        <h2>Average Beds</h2>
    </div>
</div>

    <hr>

    <div class="row border border-primary">
    <div class="col border border-danger">
        <h2>Average Price</h2>
    </div>

    <div class="col border border-success">
        <h2>Listing count</h2>
    </div>
</div>
}


@code
{
    private List<NeighbourhoodAverageAvailability>? _averageAvailabilityPerNeighbourhood { get; set; }
    private List<NeighbourhoodAverageBeds>? _averageBedsPerNeighbourhood { get; set; }
    private List<NeighbourhoodAveragePrice>? _averagePricePerNeighbourhood { get; set; }
    private List<NeighbourhoodListingCount>? _listingCountsPerNeighbourhood { get; set; }
    private string? _error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {

            _averageAvailabilityPerNeighbourhood = await statisticsService.GetAverageAvailabilityPerNeighbourhood();
            _averageBedsPerNeighbourhood = await statisticsService.GetAverageBedsPerNeighbourhood();
            _averagePricePerNeighbourhood = await statisticsService.GetAveragePricePerNeighbourhood();
            _listingCountsPerNeighbourhood = await statisticsService.GetListingCountPerNeighbourhood();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }

        await base.OnInitializedAsync();
    }
}
