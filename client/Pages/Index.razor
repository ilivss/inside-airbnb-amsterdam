@page "/"

@using client.Models;
@using client.Services;
@using client.Components;

@inject IListingService listingService;
@inject INeighbourhoodService neighbourhoodService;

<PageTitle>Index</PageTitle>


@if (_error == null && (_listings == null || _neighbourhoods == null))
{
    <div class="spinner-grow" style="width: 3rem; height: 3rem;" role="status">
    <span class="visually-hidden">Loading...</span>
</div>
}
else if (_error != null)
{
    <div class="alert alert-danger d-flex align-items-center" role="alert">
    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="currentColor"
        class="bi bi-exclamation-triangle-fill flex-shrink-0 me-2" viewBox="0 0 16 16" role="img" aria-label="Warning:">
        <path
            d="M8.982 1.566a1.13 1.13 0 0 0-1.96 0L.165 13.233c-.457.778.091 1.767.98 1.767h13.713c.889 0 1.438-.99.98-1.767L8.982 1.566zM8 5c.535 0 .954.462.9.995l-.35 3.507a.552.552 0 0 1-1.1 0L7.1 5.995A.905.905 0 0 1 8 5zm.002 6a1 1 0 1 1 0 2 1 1 0 0 1 0-2z" />
    </svg>
    <div>@_error</div>
</div>
}
else
{
    <div class="row border border-2 border-danger">
    <div class="col-8 border border-2 border-primary">
        mapbox
        <p>count: @_listings?.Count</p>
    </div>
    <div class="col-4 border border-2 border-success">
        <ListingFilterForm neighbourhoods="@_neighbourhoods" FilterListings="FilterListings" />
    </div>
</div>
}

@code
{
    private List<Listing>? _listings { get; set; }
    private List<Neighbourhood>? _neighbourhoods { get; set; }
    private string? _error { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _listings = await listingService.Get(null, null, null, null, null);
            _neighbourhoods = await neighbourhoodService.Get();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }

        await base.OnInitializedAsync();
    }

    public async Task FilterListings(ListingFilters listingFilters)
    {
        try
        {

            _listings = await listingService.Get(listingFilters.MinPrice,
            listingFilters.MaxPrice,
            listingFilters.Neighbourhood,
            listingFilters.MinNrOfReviews,
            listingFilters.MaxNrOfReviews);
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }
}
