@page "/"

@using client.Models;
@using client.Services;
@using client.Components;

@inject IListingService listingService;
@inject INeighbourhoodService neighbourhoodService;

<PageTitle>Index</PageTitle>

<div class="container-fluid h-100">
    @if (_error == null && (_listings == null || _neighbourhoods == null))
    {
        <div class="h-100 d-flex flex-column justify-content-center align-items-center">
            <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (_error != null)
    {
        <div class="h-100 d-flex flex-column justify-content-center align-items-center">
            <Error Message="@_error" />
        </div>
    }
    else
    {
        <div class="row h-100">
            <div class="col-8">
                <Mapbox listings="@_listings" SetListing="SetListing" />
            </div>
            <div class="col-4 h-100">
                <div class="row" style="height: 330px;">
                    <h2 class="mt-3">Filters</h2>
                    <ListingFilterForm neighbourhoods="@_neighbourhoods" FilterListings="FilterListings" />
                </div>


                @if (_listing != null)
                {
                    <hr />
                    <div class="row overflow-scroll" style="height: calc(100% - 350px)">
                        <ListingDetails listing="@_listing" SetListing="SetListing" />
                    </div>
                }
            </div>
        </div>
    }
</div>

@code
{
    private List<Listing>? _listings { get; set; }
    private List<Neighbourhood>? _neighbourhoods { get; set; }
    private string? _error { get; set; }
    private Listing? _listing { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _listings = await listingService.Get(null, null, null, null, null);
            _neighbourhoods = await neighbourhoodService.Get();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    public async Task FilterListings(ListingFilters listingFilters)
    {
        try
        {
            _listings = await listingService.Get(listingFilters.MinPrice,
            listingFilters.MaxPrice,
            listingFilters.Neighbourhood,
            listingFilters.MinNrOfReviews,
            listingFilters.MaxNrOfReviews);
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    public async void SetListing(string? listingId)
    {
        if (listingId == null)
        {
            _listing = null;
        }
        else
        {
            _listing = await listingService.Get(listingId);
        }
        StateHasChanged();
    }
}
